{"/checkchan":{"title":"Check酱¹","data":{"":"Check酱是一个通用网页内容监控工具，可以监测网页内容变化，并发送异动到微信","商店安装#商店安装":"微软Edge\t谷歌Chrome\t\t\t\n点以上图标进入商店页面或者直接在商店搜索「Check酱」即可","官方视频教程#官方视频教程":"详细版，近2小时","开源声明#开源声明":"⚠️ 浏览器插件不开源，docker目录下的代码仅供安全核查和编译多平台镜像，采用附加条件的GPLV3授权：\n不得修改或删除默认对接的Server酱通道。\n不得对接其他消息通道后再次发布。\n满足以上两个条件后，遵从GPLv3协议。","最新版本#最新版本":"插件·Chrome/Edge：2024.10.05.13.57 下载\nDocker镜像(云端+远程桌面二合一)：2024.10.10.17.20 Docker Hub\n文档：2024.10.11.10.14\n更新日志：GitHub\n生态：RSSHub浏览器插件整合版（源码 | 下载）\nDocker镜像安装命令请参阅后文云端架设一节","什么是check酱#什么是「Check酱」":"Check酱是方糖气球出品的网页内容监测工具，它包含一个Edge/Chrome浏览器插件和可以自行架设的云端。基于浏览器插件，它通过可视化选择器理论上可以监控网页上的任意内容（文本）、除了浏览器通知，还可以配合Server酱将异动推送到微信或手机。Check酱的原理是，通过浏览器插件后台打开网页进行监测，从而完全模拟用户的真实行为，可以监控绝大部分复杂的动态网页，需要登录的各种后台页面，并（在绝大多数情况下）自动延续登录态。除了支持网页内容（Dom）的监测，还支持HTTP状态（通过GET监测）、JSON和RSS方式。配合可以自行架设的云端，可以将监测任务同步到服务器，这样当浏览器和电脑关掉以后，监测任务依然可以定时运行。","插件的安装和使用#插件的安装和使用":"插件可以独立使用，只是关掉后定时监测任务不执行。","安装#安装":"打开Edge的插件页面，打开「开发者模式」，点击「Load Unpacked」，选择上边解压得到的目录A。成功载入的话，就可以看到Check酱界面了。如果失败，通常是因为解压时多了一层目录导致的，可以试试重新选择A目录的下一级目录","使用#使用":"","添加网页监控点#添加网页监控点":"安装插件后，打开要监控的网页，在网页上点击右键，可以看到「定位监测对象」一项。点击后，开始初始化可视化选择器。移动鼠标可以看到高亮区域，放到要监控的文字上点击鼠标左键。\n注意，选择区域必须包含文本，否则会返回空。有很多文本是印在图片上的，这种也会返回空。\n将转向到添加页面。可以修改名称、设置监控间隔时间、延迟、最大重试次数。在保存之前，最好点击CSS选择器路径一栏后的测试按钮进行测试。如果提示「检测内容为空」，说明存在问题。再次点击进行观察：如果发现页面打开后favicon没有出来就关了，可以增加「延迟读取」的秒数；如果打开后还是返回空，那么刚才自动生成的选择器路径可能不正确。可以更换为浏览器自动生成的，方法如下：① 在要检测的文本上点右键，选择「inspect/审查元素」② 这时候会自动打开开发者工具，并自动选中源码中元素的对应行。在高亮的行上点击右键，选择「复制/Copy」→ 「复制选择器/Copy selector」③ 将复制到的剪贴板的路径填入到「CSS选择器路径」一行后，再次点击「测试」按钮进行测试。测试通过后，点击「提交」保存监测点。","通过server酱推送到微信和其他设备#通过Server酱推送到微信和其他设备":"在添加和修改监测点时，填入Sendkey即可将消息推送到Server酱。","如何获得-sendkey#如何获得 SendKey":"登录Server酱官网，进入「Key&API」，点击「复制」按钮即可。","如何推送到其他通道#如何推送到其他通道":"登录Server酱官网，进入「通道配置」，选择要推送的通道，并按页面上的说明进行配置。可以将消息推送到「PushDeer」和各种群机器人。如果以上通道不能满足你的需要，可以选择「自定义」通道，发送自定义的http请求。此方式可以兼容绝大部分通知接口。","导入和导出全部监控点#导入和导出全部监控点":"点击监控点列表右上方的向上和向下箭头可以导入和导出全部监控点。","分享和导入监控点#分享和导入监控点":"点击监控点列表中的「剪贴板」，可以将当前监控点的设置导出到剪贴板。导出数据类似这样：\ncheckchan://title=Server%E9%85%B1%E5%AE%98%E6%96%B9%E7%BD%91%E7%AB%99%E7%8A%B6%E6%80%81&url=https%3A%2F%2Fsct.ftqq.com&type=get&code=200&rss_field=title&delay=3&retry=10\n复制以上字符后，在Check酱浏览器插件界面通过Ctrl+V粘贴，会自动识别并跳转到「添加监测点」界面。","监测周期限制#监测周期限制":"有些任务只需要在特定的时间段执行，为了节省资源，我们添加了「监测周期限制」功能。比如某动画每周五上午十点更新，那么我们可以将「监测周期限制」设置如下：这样其他时间段就不再启动监测。对于无法预知事件段的任务，使用默认的「每分钟」即可。注意在「监测周期限制」之上，还有「监控间隔时间」。如果 「监测周期限制」 为每分钟，而「监控间隔时间」为60分钟，那么每分钟都会尝试监测，而一旦监测成功一次，那么下次监测将是60分钟后。同时，因为执行监测任务本身也耗费时间，所以「监控间隔时间」为1分钟时，往往每隔一分钟（即每两分钟）才会运行一次任务。","selector-扩展语法#Selector 扩展语法":"","通过指定数组元素#通过@指定数组元素":"最新的版本支持了一个Selector扩展语法：由于底层通过 document.querySelectorAll 实现，因此会返回匹配的全部元素于一个数组。当这些元素属于同一个父节点我们可以用 :nth-of-type(1) 或者 :nth-child(1)来指定数组中的某一项。但如果这些元素不属于同一个父节点，那么以上方法会失效。这里添加了一个 selector@n 的语法，让我们可以从 Selector 返回的数组中指定某一个元素。如 .booklist .item@0 将返回  document.querySelectorAll(.booklist .item)[0] 。\n@语法除了使用在DOM selector上，还可以用来指定 RSS 监测结果。默认情况下，RSS 将返回整个Feed的第一篇文章，你可以用过在 Feed url 后边添加 @1 ，将其指定为监测第二篇文章（依然是从0开始计数）。","通过获得元素属性#通过%获得元素属性":"Selector的最下一级返回一个元素，但有时候我们需要监测这个元素的某个属性值。比如监测一个链接的href。为了解决这个问题，我们扩展了 selector 语法，让用户可以通过 element%attribute 的方式来获取元素的某个属性值。如：article#post-180 > div > div > p > a%href。当 % 和 @ 同时使用时， % 应紧跟元素后，如：article#post-180 > div > div > p > a%href@0。","日志查看和错误定位#日志查看和错误定位":"为了更清楚的了解定时任务的执行情况，你可以打开「开发者工具」（F12）在 Console 标签页中可以看到任务产生的日志。错误信息也会在这里以红色高亮的行显示，遇到Bug时提供日志错误截图可以帮助我们更快的定位到问题。","更新浏览器插件#更新浏览器插件":"上架商店后，可以自动升级，在此之前需要手动升级。升级方式为下载zip包解压后覆盖原有文件，再在浏览器的插件管理面板中「reload」一下。","镜像的安装和使用#镜像的安装和使用":"新版镜像已经将云端和远程桌面版本集成，只需一次安装都可以使用。\n云端：配合自行架设的服务器，可以将任务同步到云端执行，即使关掉浏览器和电脑后监测任务也会一直运行。\n远程桌面：在Docker中封装了Chrome浏览器，可以通过VNC和Web界面像在电脑上一样使用。\n⚠️ 特别说明：因为云端的网络、环境都和本机不同，所以并不保证本机能运行的任务都能在云端运行成功，一些复杂网页和有较多动态效果的网页可能失败。","安装-1#安装":"架设自架版云端需要技术基础，非技术用户建议购买我们的官方版云端（将在内测完成后发布）\n需要docker环境。如果你没有云服务器，可以看看腾讯云30~50元首单的特价服务器。","一键安装命令#一键安装命令":"点此进入工具界面","通过-docker-compose-启动#通过 Docker-compose 启动":"登录服务器（假设其IP为IPB），在要安装的目录下新建目录 data，并使其可写：\nmkdir data && chmod 0755 data\n新建一个 docker-compose.yml 文件，将下边的内容按提示调整后粘贴保存：\nversion: '3'\nservices:\n  chrome:\n    image: easychen/checkchan:latest\n    volumes:\n      - \"./data:/checkchan/data\"\n    environment:\n      - \"CKC_PASSWD=<这里是远程桌面的密码，写一个你自己想的>\"\n      - \"VDEBUG=OFF\"\n      - \"VNC=ON\"\n      #- \"WIN_WIDTH=414\"\n      #- \"WIN_HEIGHT=896\"\n      #- \"XVFB_WHD=500x896x16\"\n      - \"API_KEY=<这里是云端的API KEY，写一个你自己想的>\"\n      - \"ERROR_IMAGE=NORMAL\" # NONE,NORMAL,FULL\n      #- \"SNAP_URL_BASE=<开启截图在这里写服务器地址（结尾不用加/），不开留空>...\"\n      #- \"SNAP_FULL=1\"\n      - \"TZ=Asia/Chongqing\"\n      # - \"WEBHOOK_URL=http://...\" # 云端 Webhook地址，不需要则不用设置\n      # - \"WEBHOOK_FORMAT=json\" # 云端 Webhook POST 编码，默认是 Form\n    ports:\n      - \"5900:5900\" \n      - \"8080:8080\" \n      - \"8088:80\"\n将其中<这里是远程桌面的密码，写一个你自己想的>和 <这里是云端的API KEY，写一个你自己想的> 换成别人不知道的密码（下文称密码C和D）。注意不要包含$字符，替换完后也不再有两边的尖括号<>。如果不希望启动远程桌面，请将 VNC=ON 改为 VNC=OFF。保证Docker用户对此目录有写权限，并在同一目录下运行以下命令：\ndocker-compose up -d\n如提示docker服务未安装/找不到/未启动，可在 docker-compose 前加 sudo 再试\n等待初始化完成后，访问 http://$BBB:8080( 将$BBB替换为IP B)，看到 NoVNC Web界面说明容器已经启动。服务所在的端口为：\n云端：8088\n远程桌面(VNC): 5900\n远程桌面的Web界面(NoVNC): 8080","通过-docker-启动#通过 Docker 启动":"你也可以将 docker-compose 中的参数传给 docker 来启动：\ndocker run -d -p 8088:80 -p 8080:8080 -p 5900:5900 -v ${PWD}/data:/checkchan/data -e API_KEY=123  -e VDEBUG=OFF -e VNC=ON -e SNAP_URL_BASE=http://localhost:8088  -e CKC_PASSWD=123 -e TZ=Asia/Chongqing easychen/checkchan:latest\n请将上述命令中的123替换为你想要设定的密码、将SNAP_URL_BASE换成服务器的外网IP(如果想通过手机查看截图)。","群晖安装#群晖安装":"只有支持Docker的群晖型号才能安装Check酱，除了可以直接通过命令行安装，也可以参考GUI安装教程。Volume 和环境变量可以参考以上的docker/compose设定。","更新镜像#更新镜像":"Check酱云端镜像更新后，你可以将正在运行的云端服务升级到最新版。方式如下：首先停现有的容器：通过 docker-compose 启动的运行：\ndocker-compose down\n通过 docker 直接启动的运行 docker ps 查询到容器id，通过 docker stop 容器id 停止。然后运行 docker pull 拉取最新版：\ndocker pull easychen/checkchan:latest\n完成后再启动服务即可。","云端的使用#云端的使用":"","将浏览器插件对接云端#将浏览器插件对接云端":"点击插件右上方菜单中的云端服务。在服务器地址一栏输入 http://BBB:8088(将BBB替换为IP B，这里的URL不用加key参数)；在API_KEY一栏输入密码C。点击保存，连接成功后，配置完成。","同步本地任务到云端#同步本地任务到云端":"配置好云端以后回到列表页，每行最右边会多出来一个「电脑」图标，点击后会变成「云」图标，该任务将改为在云端执行。点击右上角 「云+箭头」的按钮，可以主动同步任务到云端。Check酱也会每十分钟自动同步一次。","云端截图#云端截图":"Check酱自架云端支持对网页（dom）类型任务进行截图，可以通过给镜像传递环境变量来开启：\nSNAP_URL_BASE=<开启截图在这里写服务器地址，不开留空> 如 http://ip.com/\nSNAP_FULL=1 完整网页长图\n可参考上文的docker-compser.yml。添加环境变量后重启服务即可。注意\n截图功能需要较大的内存，部分服务器可能会报错\n云端网络和本地不同，可能会超时失败，请适当增加延时，并将取消完整截图","rss上行接口#RSS上行接口":"Check酱自架云端内置了动态页面RSS上行用的接口：\nRSS上行地址为： http://$ip:$port/rss/upload?key=$api_key\nRSS Feed地址为：http://$ip:$port/image/rss.xml?key=$api_key","多浏览器cookie同步接口#多浏览器Cookie同步接口":"Check酱自架云端内置了Cookie同步用的接口：\nCookie同步URL为： http://$ip:$port/cookie/sync?key=$api_key\n配对密码： 自行设定，同步Cookie的两个浏览器中必须一致\n同步方向： 一个发送一个接收，一般电脑上的发送、服务器上远程桌面里的接收\n同步频率：发送或者接收间隔时间","云端任务的安全性#云端任务的安全性":"Check酱云端任务的原理是将cookie同步到云端，然后用浏览器查看，本质和用户操作一样。但因为出口IP可能是机房和数据中心，频次太高也有被风控的可能。如果将云端部署在家里，则和在家用电脑访问效果一样。","云端错误排查#云端错误排查":"通常来讲，出现本地任务可以执行，云端不能执行的问题，是因为两者网络环境、浏览器软件存在差异，比如：\n页面结构每次都会变动：比如一些网站的首页，建议进入分类列表页面选择监控点\n电脑网络和云端网络不同：在浏览器中可以访问的内容，在数据中心可能访问不到\nCDN更新延迟：电脑和云端CDN节点刷新未完成，会造成一边可用一边不可用，等待更新完成后再监控\n浏览器插件改变了网页结构：比如本地通过 AdBlock 过滤了广告，但云端没有，造成结构不同，监测失败\n由于服务器内存通常没大家电脑大，所以很多在本地执行OK的任务同步到云端后会因为「延迟读取」秒数太小中途停止而失败。如果遇到类似情况，请尝试增加「延迟读取」。如果这样也不行，往往是因为云端无头浏览器显示网页和本地存在差异导致，我们为这种情况生成了最近一次失败的任务的截图，可以在「云端服务」菜单下看到。点击「失败截图」按钮即可看到。注意：需要只用最新的镜像，并传递ERROR_IMAGE=NORMAL 环境变量。如果希望截取完整网页的图片，可以传递ERROR_IMAGE=FULL。如果任务失败又没有截图，说明该任务不是因为CSS选择器未命中而失败，尝试增加「延迟读取」可能解决。这个页面也能看到云端任务日志，这里的日志不包含手动点击「监测」按钮触发的任务。如果没有可以执行的任务（任务是定时触发的），那么日志亦可能为空。","远程桌面版的使用#远程桌面版的使用":"除了自架云端，我们还在镜像中集成了远程桌面模式。它让你可以通过VNC连接服务器，像使用本地浏览器一样使用。\n远程桌面版本之前为一个独立镜像，现在已经整合到 easychen/checkchan 中，因此你可以直接使用。","通过-web-界面使用#通过 Web 界面使用":"Web界面: http:///$BBB:8080\n密码: 123 （可自行修改命令调整）","通过-vnc-连接使用#通过 VNC 连接使用":"服务启动后，可以通过 VNC 客户端软件进行连接使用。\n连接地址: 架设服务的IP:5900\n密码: 123 （可自行修改命令调整）","连接云端#连接云端":"在远程桌面中，可以直接连接同一个容器内的云端，服务器地址填 http://localhost，API KEY按上边 YML 中设置的输入即可。","移动版#移动版":"可以添加环境变量，修改屏幕宽高限制，使其在手机上更好用:\n- WIN_WIDTH=414 \n- WIN_HEIGHT=896 \n- XVFB_WHD=500x896x16\n一个加到 docker 命令中的例子：\ndocker run -d -p 5900:5900 -v ${PWD}/data:/checkchan/data -e CKC_PASSWD=123 -e WIN_WIDTH=414 -e WIN_HEIGHT=896 -e XVFB_WHD=500x896x16 easychen/checkchan:latest","特别说明#特别说明":"容器日常消耗在 300M~500M。内存较大的运行环境会比较稳定，如果遇到问题可尝试加大内存。","可视化调试#可视化调试":"使用同一个镜像中集成的云端可以对云端任务进行可视化调试，将 YML 文件中的 VDEBUG 设置为 ON，再重新启动容器即可看到云端监测网页的详细过程。\nenvironment:\n  - \"CKC_PASSWD=123\"\n  - \"VDEBUG=ON\""}},"/":{"title":"方糖产品宇宙","data":{"server酱#Server酱":"极简推送服务，一个HTTP请求即可推送消息到手机。\n产品名称\t产品简介\t文档\tServer酱Turbo\t整合第三方通道版本，包括微信服务号、测试号、企业微信、钉钉群和飞信群，以及自定义WebHook\t-\tServer酱³\t官方APP版本，8大厂商通道支持，9成手机无需驻留后台亦可收信\t点此阅读","check酱#Check酱":"任意网页检测工具。\n产品名称\t产品简介\t文档\tCheck酱¹\t浏览器插件，可检测任意网页变动，并推送通知到手机\t点此阅读"}},"/serverchan3/app/install":{"title":"安装","data":{"商店安装和手动安装#商店安装和手动安装":"请进入官网下载页面：\n如果有手机品牌对应的市场，可以点击对应的按钮到市场下载或者搜索「Server酱」；\n如果没有，则直接下载APK后手动安装。\n市场的安装包和直接下载的安装包是完全一致的。一般因为审核问题，市场可能比最新版本晚一两天","配置#配置":"推荐使用后台驻留方式，支持所有的Android品牌，信息秒达。\n后续有省电需求或者老被系统杀后台再采用无后台方式。\n请依次打开以下权限：\n通知权限，特别是「通知分类」中「用户私有通知」的权限，部分手机可指定提醒方式和声音\n通知过滤规则：全部设为重要\n后台常驻/锁屏保护\n自启动/自动后台\n后台弹出界面\n应用省电设置：无限制\n可以查看以下各个品牌的设置帮助：\n以下设置帮助为英文，但可直接参考截图\n华为\n小米\n一加\n三星\n魅族\nOPPO\nvivo\nRealMe\n其他","无后台推送#无后台推送":"当应用不在后台时，只有通过厂商通道才能收到消息。本应用支持以下厂商通道：\niOS：苹果手机\nFCM：支持谷歌推送的手机，注册设备需要海外网络，国内大部分网络可以接受推送\nMiPush：小米、红米系列手机\nPush Kit：华为手机和平板，EMUI 3.0及以上，HMS Core 3.0.0及以上\nHONOR Push：荣耀手机和平板，国内Magic UI 4.0及以上\nOPPO Push：支持 ColorOS3.1及以上的系统的OPPO的机型，一加5/5t及以上机型，realme所有机型\nvivo Push：vivo、iQOO系列手机\nFlyme Push：魅族手机，Flyme系统"}},"/serverchan3/app/use":{"title":"用户手册","data":{"":"V1.0.15","1-登录#1. 登录":"在使用本应用之前，用户需要进行登录。登录可以通过两种方式进行：手工输入或扫码输入SendKey。","手工输入sendkey#手工输入SendKey：":"启动应用后，自动进入登录页面。\n在页面中间的输入框中输入您的SendKey。\n点击页面底部的“登入”按钮进行登录。","扫码输入sendkey#扫码输入SendKey：":"在登录页面，点击“扫码以获取SendKey”按钮。\n使用手机摄像头扫描二维码获取SendKey。\n系统会自动填充扫描到的SendKey到输入框。\n确认无误后，点击“登入”继续。\n登录成功后，应用将自动将您导航至主界面，显示您的消息列表。如果登录失败，应用会提示错误信息，请检查您的SendKey是否正确。","2-消息列表#2. 消息列表":"登录后，主界面默认显示的是消息列表页面。此页面列出了所有从服务器通过API获取的消息，并自动进行了以下处理：\n消息预览：每条消息会显示标题和部分内容的预览，如果消息包含图片，将尝试提取并显示缩略图。\n自动更新：应用会在启动时和页面切换时从服务器获取最新消息，并更新列表。\n数据本地化：所有从服务器获取的消息都会存储到本地数据库中，即使在没有网络连接的情况下，也能浏览和管理消息。\n默认列出的是所有消息，可以点击「未读」、「加星」进行筛选。","消息操作#消息操作：":"查看详情：点击任何一条消息，可以进入消息详情页面。\n删除消息：消息列表中，左滑消息可以显示删除选项，点击“删除”即可从本地数据库和服务器中删除该消息。","搜索功能#搜索功能：":"消息列表顶部有一个搜索框，支持输入关键字对消息标题和内容进行搜索。","3-消息阅读#3. 消息阅读":"在消息列表中点击任意消息，您将进入消息阅读页面。此页面不仅支持基本的文本显示和图片查看，还提供了丰富的交互功能和辅助工具。","基本功能#基本功能：":"Markdown显示：消息内容支持Markdown格式，允许格式化文本、显示链接、图片等多媒体元素。\nServer酱³使用flutter_markdown0.7.4渲染Markdown。\n注意在Makrdown中两次回车\\n\\n才是换行。不支持HTML语法， 这种格式是HTML，需要改成Markdown格式。\n可以把HTML发送给AI让其帮你转换。\n总结与翻译：页面下方提供总结和翻译按钮。点击后，系统会调用后端API处理文本，并将结果展示在屏幕上。\n图片模式：如果消息内容中包含图片链接，您可以切换至图片模式查看所有相关图片。","动态界面元素#动态界面元素：":"自动隐藏菜单：当您在消息阅读页面向下滑动阅读消息时，顶部的导航栏和底部的功能菜单会自动隐藏，以提供更大的阅读区域。\n重新显示菜单：当您向上滑动时，顶部和底部的菜单会重新出现，允许您快速访问各种功能，例如翻译、总结、标记为已读/未读等。","查看与操作图片#查看与操作图片：":"点击图片进入全屏模式：在消息内容中，任何可识别的图片链接都将被格式化为可点击的图片。点击任何一张图片，应用将展开该图片至全屏查看模式。\n全屏模式交互：\n下载图片：在全屏模式下，会有一个下载图标（显示为一个向下箭头）。点击此图标，图片将自动下载到您的设备相册。\n关闭查看：全屏模式中，有一个“X”图标位于屏幕右上角。点击此图标可以退出全屏模式，返回到消息阅读页面。","4-tag标签分组#4. Tag（标签）分组":"消息可以通过Tag进行组织，虽然本应用不支持用户自行添加、删除或编辑Tag，但可以通过选择已有的Tag来过滤消息。","访问tag选择#访问Tag选择：":"在消息列表页面，点击左上角的汉堡菜单（三条横线图标），展开侧边栏，显示所有Tag。\n选择Tag过滤消息：在侧边栏中选择一个Tag，消息列表将只显示与该Tag相关的消息。\n点击Tag列表项尾部的菜单图标，可以进一步设置Tag的阅读偏好。","5-高级设置#5. 高级设置":"在设置页面，用户可以进行一些高级配置，例如：\n清除消息：用户可以选择清除所有消息，或只清除未加星标的消息。\n通知设置：用户可以配置是否接收新消息通知以及通知的形式。\n账号管理：用户可以退出登录或更新个人信息。","访问设置#访问设置：":"在任何页面的右上角，点击设置图标（齿轮形状）进入设置页面。\n在设置页面，可以看到不同的配置选项，包括清除消息和账号管理等。","使用提示#使用提示":"确保在使用前已正确配置网络连接，以便应用能够从服务器获取数据。\n不要泄露您的SendKey，确保账号安全。\n使用扫码登录可以避免输入错误，提高安全性。"}},"/serverchan3/changelog":{"title":"更新日志","data":{"1015#1.0.15":"优化消息正文选择，支持跨行选取；优化设置页面，调整项目和顺序；修正部分情况下退出后重登入连接服务器失败的问题","1014#1.0.14":"iOS添加未读消息计数；设置页面添加一键标记全部消息为已读","1013#1.0.13":"优化消息列表中卡片的文字布局（避免长文字过早换行），当年消息不显示年份；正文的markdown在列表页的显示优化","109#1.0.9":"新增 Action Link。将链接中的 https 改为 sccallback 用户点击时，APP会填出确认框，并通过底部提示栏直接显示接口返回内容。可用于更便捷地触发api调用。\nMethod为POST\n动态参数:{{{sc:user_name}}}和{{{sc:user_id}}}\n示例：\n[点此发送测试](sccallback://*.push.ft07.com?title=test&uid={{{sc:user_id}}}&name={{{sc:user_name}}}  \"确认框显示文案\")"}},"/serverchan3/compatibility/sct-forward":{"title":"Sct Forward","data":{"转发服务#转发服务":"Server酱³ 和 Server酱Turbo 采用不同的用户系统和SendKey，因此无法在系统内部进行兼容。一个现实问题是，目前市面上的应用主要整合的是Server酱Turbo，虽然我们在努力推送对Server酱³的整合，但这依然需要很长的时间。因此，我们架设了一个临时转发系统，当它发现SendKey来自Server酱³时，会自动将其转发。\n请务必注意：\n这个转发系统是临时的，当Server酱³的生态成熟后，会停止使用（最长三年）\n为了让用户和软件作者优先使用Server酱³的官方入口，本系统转发的内容会添加广告","最佳实践#最佳实践":"为了提升您的使用体验，请：\n对您自己开发的程序，请使用Server酱³官方API入口\n对您在使用的软件和服务，请向开发方建议兼容Server酱³官方API入口。\n我们提供了SDK，可以同时兼容Server酱Turbo和Server酱³，替换起来成本很低。"}},"/serverchan3/faq":{"title":"常见问题","data":{"":"Server酱³是免费的吗？如果不是，将如何收费吗？\nServer酱³同时包含推送服务和AI服务。不同的服务有不同的收费模式：\n推送服务在测试期间免费，正式版将开始收费，收费标准和Server酱Turbo(sct.ftqq.com)一致。Server酱Turbo的订阅会员无需重复付费，届时我们会提供一个方案将会员时间可以同步到Server酱³上。\nAI相关功能(如摘要和翻译)，无论是否测试期，均会消耗点数(费用说明)，新注册用户有赠送点数，用完后需自行充值购买。\nServer酱³（sc3.ft07.com）和Server酱Turbo(sct.ftqq.com)有什么关系？\nServer酱³是一个全新的产品线，专注于自有客户端体验，目前已经支持AI摘要、翻译和读图模式，还有以Tag为主的消息分组方案。\nServer酱Turbo则着重于以微信为主的多通道推送。\n两者的用户、SendKey不通用。接口上，除了Server酱³的API URL中，将需要在域名中添加uid，绝大部分参数兼容Server酱Turbo。\nxx软件可以使用Server酱³吗？\n理论上，只有兼容了Server酱³接口的软件才支持，但我们提供了一个从SCT到SC3的转发服务，使得暂时所有支持SCT的软件理论上都可以支持Server酱³。请点此查看关于转发的详细说明。\nServer酱³是否支持多设备？如何管理注册过的设备\nServer酱³支持多设备，默认情况下会对所有注册过的设备进行推送。你可以在官网的「设备管理」页面对设备进行删除、启用/停止推送等管理。\nServer酱³如何删除消息？如何一次删除全部消息？\n按住消息向左滑动，会出现删除按钮，再次点击即可删除单条消息。\n点击消息列表页面右上角的菜单，进入设置页面。在「消息设置」中点击「清除所有客户端+服务器消息」即可\nServer酱³中的「客户端消息」和「服务器消息」是什么？有何不同？\n这和Server酱³的运行方式有关，消息首先推送达到服务器，并缓存72小时\n然后客户端启动和刷新时，从服务器拉取消息，并保存到本地数据库\n消息列表页面显示的是本地数据库的消息，这样即使不联网，也能浏览历史消息\n设置中的「仅清除客户端消息」点击后，刷新可以从服务器端再次拉取消息；而「清除所有客户端+服务器消息」则同时删除服务器上的缓存消息，其他客户端亦无法拉取\nServer酱³如何选择性的批量删除消息？\n将不想删除的消息加星。\n点击消息列表页面右上角的菜单，进入设置页面。在「消息设置」中点击「清除所有未加星消息」即可\nServer酱³如何将所有消息标记为已读？\n点击消息列表页面右上角的菜单，进入设置页面。在「消息设置」中可以看到「全部标记为已读」按钮。\n如果你的设置页面没有此按钮，请升级到最新版本。\n推送消息时如何换行？是否支持表格？格式是什么\nServer酱³使用flutter_markdown0.7.4渲染Markdown，支持Makrdown语法，但不允许HTML。 这种格式是HTML，需要改成Markdown格式。\n注意在Makrdown中两次回车\\n\\n才是换行。\n可以把HTML发送给AI让其帮你转换。\n推送消息时如何附带图片？\nServer酱³不支持base64作为图片的URL，需要自行将图片上传到网络获得可访问的URL，然后再使用Markdown语法，通过desp参数推送。注意其他参数不支持Markdown，且只在消息详情页面显示。\n推送消息时 desp 参数采用了Makrdown，消息卡片上看起来很乱，怎么办？\n可以通过 short 参数指定消息卡片中内容部分显示的具体文字。\n可参考API文档中的参数部分。\n消息Tags如何删除或者编辑？\n消息Tags由消息包含的标签自动聚合生成\n删除掉全部包含某Tag的消息，Tag即会消失\n同样的，因为来自自动聚合，所以无法手动修改Tag名称"}},"/serverchan3":{"title":"Server酱³ 使用说明书","data":{"":"Server酱³ 和 Server酱Turbo 采用不同的用户系统和Sendkey，两者不通用","省流版#省流版":"登入网站，在SendKey页面获得SendKey\n安装并配置APP*\n通过API或者SDK调用消息发送接口\n或者将SendKey填入已集成软件，让软件来调用接口发送消息\nServer酱³专注于APP推送，大部分手机无需驻留后台亦可收信。如果想推送到其他通道，比如微信（测试号、服务号）、企业微信、钉钉群、飞书群以及WebHook，可使用Server酱Turbo","什么是server酱#什么是Server酱":"Server酱原本是一个为程序员开发的、调用HTTP接口往手机推送报警消息的服务，但很快用户们发现，它可以用到各种场景,于是越来越多的普通用户开始使用它。经过六七年的发展，已经拥有超过20万的用户。另一方面，虽然整个服务主要就一个API，但手动调用API总是麻烦的。于是很多软件都集成了Server酱，只需要填入SendKey，就可以使用。目前，超过2000个开源项目整合了Server酱接口。因此，我们有两种方式使用Server酱：\n通过API接口直接推送\n通过集成了Server酱的软件使用","通过api接口直接推送#通过API接口直接推送":"","使用示例#使用示例":"curl \"https://<uid>.push.ft07.com/send/<sendkey>.send?title=<title>&desp=<desp>\"\n此方式更适合程序员，可以查看API的详细说明、SDK和各种语言的调用示例代码","通过集成了server酱的软件使用#通过集成了Server酱的软件使用":"此方式更适合非技术用户，可以查看可用软件及其配置方法。","使用示例-1#使用示例":"在Check酱中填入SendKey。"}},"/serverchan3/privacy/android":{"title":"Server酱隐私政策","data":{"1-应用权限#1. 应用权限":"联网：用于获取和发送消息\n相机：用于扫码填入 Sendkey\n存储读写：用于消息和设置项","2-信息收集与使用#2. 信息收集与使用":"设备序列号：用于消息推送\n加速传感器信息：用于优化扫码\n消息内容：您的消息主要存储于客户端本地设备上，以确保您在离线时也能访问这些信息。\n用户身份验证信息：通过 SendKey 验证您的身份，确保您的账号和数据安全。我们会存储您的微信 OpenID、昵称和头像用于界面显示。","3-消息存储#3. 消息存储":"本地存储：消息会保存在您的客户端设备上。除非您主动删除，所有消息都会一直保存在您的设备中。\n服务器缓存：为确保消息推送功能的有效性，我们的服务器会暂时缓存您的消息，缓存时间为 72 小时。在此之后，消息会自动从服务器删除，确保您的隐私安全。","4-信息共享#4. 信息共享":"我们使用阿里云推送 SDK 实现推送，您的消息会经由阿里云转发。为提升到达率，我们启用了阿里云的厂商通道，在离线时，您的消息还可能转入对应的手机厂商平台处理（如小米、华为、OPPO、Vivo）。\n当您使用 AI 相关功能时（需主动触发或设置），待处理的文本将通过 API 发送给模型厂商（DeepSeek 和 Kimi），以实现功能。\n除此之外，我们不会将您的消息或任何个人信息提供给第三方。\n您的数据仅用于完成您与 Server 酱 APP 的交互以及相关推送服务。除法律规定或经您明确同意外，我们绝不会与其他机构、组织或个人分享您的信息。","5-安全保障#5. 安全保障":"我们采取合理的技术手段保护您的数据安全，包括使用加密技术和安全协议防止未经授权的访问、篡改或泄露您的信息。\n请妥善保管您的 SendKey，并避免在不安全的网络环境下使用我们的服务。","6-联系反馈#6. 联系反馈":"Server酱由方糖君（重庆）科技有限公司开发运营，您可以通过 support@ft07.com 联系我们。","7-用到的-sdk-及其隐私政策#7. 用到的 SDK 及其隐私政策":"SDK名称：vivo PUSH-SDK\n开发者: 维沃移动通信有限公司\n隐私链接：https://dev.vivo.com.cn/documentCenter/doc/366\nSDK名称：小米推送\n开发者: 北京小米移动软件有限公司\n隐私链接：https://dev.mi.com/console/doc/detail?pId=1822\nSDK名称：性能加速库\n开发者: 华为软件技术有限公司\n隐私链接：https://developer.huawei.com/consumer/cn/doc/development/graphics-Guides/sdk-data-security-0000001050700772\nSDK名称：移动推送-android\n开发者: 阿里云计算有限公司\n隐私链接：https://terms.aliyun.com/legal-agreement/terms/suit_bu1_ali_cloud/suit_bu1_ali_cloud202112071754_83380.html\nSDK名称：魅族推送SDK\n开发者: 珠海星纪魅族信息技术有限公司\n隐私链接：https://open.flyme.cn/docs?id=202","8-最后更新时间#8. 最后更新时间":"2024年10月14日"}},"/serverchan3/privacy/ios":{"title":"Server酱隐私政策","data":{"1-应用权限#1. 应用权限":"联网：用于获取和发送消息\n相机：用于扫码填入 Sendkey\n存储读写：用于消息和设置项","2-信息收集与使用#2. 信息收集与使用":"设备序列号：用于消息推送\n加速传感器信息：用于优化扫码\n消息内容：您的消息主要存储于客户端本地设备上，以确保您在离线时也能访问这些信息。\n用户身份验证信息：通过 SendKey 验证您的身份，确保您的账号和数据安全。我们会存储您的微信 OpenID、昵称和头像用于界面显示。","3-消息存储#3. 消息存储":"本地存储：消息会保存在您的客户端设备上。除非您主动删除，所有消息都会一直保存在您的设备中。\n服务器缓存：为确保消息推送功能的有效性，我们的服务器会暂时缓存您的消息，缓存时间为 72 小时。在此之后，消息会自动从服务器删除，确保您的隐私安全。","4-信息共享#4. 信息共享":"我们使用阿里云推送 SDK 实现推送，您的消息会经由阿里云转发。\n当您使用 AI 相关功能时（需主动触发或设置），待处理的文本将通过 API 发送给模型厂商（DeepSeek 和 Kimi），以实现功能。\n除此之外，我们不会将您的消息或任何个人信息提供给第三方。\n您的数据仅用于完成您与 Server 酱 APP 的交互以及相关推送服务。除法律规定或经您明确同意外，我们绝不会与其他机构、组织或个人分享您的信息。","5-安全保障#5. 安全保障":"我们采取合理的技术手段保护您的数据安全，包括使用加密技术和安全协议防止未经授权的访问、篡改或泄露您的信息。\n请妥善保管您的 SendKey，并避免在不安全的网络环境下使用我们的服务。","6-联系反馈#6. 联系反馈":"Server酱由方糖君（重庆）科技有限公司开发运营，您可以通过 support@ft07.com 联系我们。","7-最后更新时间#7. 最后更新时间":"2024年10月14日"}},"/serverchan3/server/api":{"title":"API","data":{"":"Server酱系列API均采用极简风格，仅仅在浏览器中输入URL就可以发送推送。","接口地址#接口地址":"API地址： https://<uid>.push.ft07.com/send/<sendkey>.send。其中：\nuid、sendkey可以从SendKey页面获得\nuid亦可从sendkey中提取，位于sctp{uid}t...处，正则为/^sctp(\\d+)t/\nAPI URL 亦可直接在SendKey页面复制","请求参数#请求参数":"","方法#方法":"POST和GET都支持。\n使用GET时，将参数放入Query中，如果参数值为中文或其他非字母字符，需要使用urlencode进行编码，换行符也需要urlencode编码\n一个简单示例：https://<uid>.push.ft07.com/send/<sendkey>.send?title=<title>&desp=<desp>","编码#编码":"使用POST时，支持以下Content-Type：\napplication/json\napplication/x-www-form-urlencoded\nmultipart/form-data\nBody请使用对应的格式。","参数#参数":"参数名\t类型\t必填\t描述\ttitle or text\tstring\t是\t推送的标题，如果未提供则使用 text 的内容\tdesp\tstring\t否\t推送的正文内容，如未提供 title，则为必填，支持markdown（在APP中显示）\ttags\tstring\t否\t标签列表，多个标签使用竖线分隔\tshort\tstring\t否\t推送消息的简短描述，用于指定消息卡片的内容部分，尤其是在推送markdown的时候","调用示例#调用示例":"请移步专门的代码仓库：GitHub · 国内网络镜像：Gitee"}},"/serverchan3/server/sdk":{"title":"SDK","data":{"通用知识#通用知识":"和接口一样，SDK也是极简模式，只有一个函数。此SDK是兼容版，同时支持 sct.ftqq.com 和 sc3.ft07.com, 也就是说，用它你就无需关系用户用的是哪个版本，它会从key中自动适配。\n所有语言的参数均为：\nsendkey\ntitle\ndesp - 消息内容，支持markdown，可以外链图片（请使用https）。\noptions - 其他更多选项\n更多选项包括以下：\n{\n    tags?: string; // SC3专用：标签列表，多个标签使用竖线分隔 \n    short?: string; // SC3和SCT：消息卡片的内容，特别适用desp为markdown时，\n    noip?: 1; // SCT专用：是否隐藏调用IP，1为隐藏\n    channel?: string; // SCT专用：推送使用的消息通道，多个通道值用竖线隔开\n    openid?: string; // SCT专用：消息抄送的 openid，仅用于企业微信应用消息和测试号通道，多个 openid 用逗号或竖线分隔\n}\n返回格式定义：\n{\n    code: number; // 返回的状态码, 0 为正确 \n    message: string;  // 返回的信息，和状态码对应\n    data?: any;  // 可选的返回数据，SCT和SC3这部分格式不同\n}\n以下是各个语言的SDK及其用法，点击查看详细","js-sdk#JS SDK":"","sdk-地址#SDK 地址":"npm : https://www.npmjs.com/package/serverchan-sdk","安装#安装":"npm install serverchan-sdk","调用实例#调用实例":"import {scSend} from 'serverchan-sdk'; \nconst sendkey = '...'; // 替换成真实的 Server 酱 sendkey\nconst title = 'Test Notification';\nconst desp = 'This is a test message';\nconst response = await scSend(sendkey, title, desp, { tags: '服务器报警|报告' });\nconsole.log('Response:', response);","php-sdk#PHP SDK":"","sdk-地址-1#SDK 地址":"compose package : https://packagist.org/packages/easychen/serverchan-sdk","安装-1#安装":"composer require easychen/serverchan-sdk","调用实例-1#调用实例":"$ret = scSend('sendkey', 'title', 'desp', ['tags'=>'服务器报警|图片']);\nprint_r($ret);","python-sdk#Python SDK":"","sdk-地址-2#SDK 地址":"pip package : https://pypi.org/project/serverchan-sdk/","安装-2#安装":"pip install serverchan-sdk","调用实例-2#调用实例":"from serverchan_sdk import sc_send\n# 发送消息\nsendkey = \"...\"\ntitle = \"测试标题\"\ndesp = \"这是消息内容\"\noptions = {\"tags\": \"服务器报警|图片\"}  # 可选参数\nresponse = sc_send(sendkey, title, desp, options)","golang-sdk#GoLang SDK":"","sdk-地址-3#SDK 地址":"https://github.com/easychen/serverchan-sdk-golang","安装-3#安装":"go get github.com/easychen/serverchan-sdk-golang","调用实例-3#调用实例":"package main\nimport (\n    \"fmt\"\n    \"github.com/easychen/serverchan-sdk-golang\"\n)\nfunc main() {\n    sendkey := \"your-sendkey\"\n    title := \"Test Message\"\n    desp := \"This is a test message\"\n    \n    resp, err := serverchan_sdk.ScSend(sendkey, title, desp, nil)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    } else {\n        fmt.Println(\"Response:\", resp)\n    }\n}","dart-sdk#Dart SDK":"","sdk-地址-4#SDK 地址":"Pub Package - https://pub.dev/packages/serverchan_sdk\n此 package 依赖 http 包","安装-4#安装":"在 pubspec.yaml 添加依赖\ndependencies:\n    serverchan_sdk:\n然后运行\ndart pub get \n# 或者\nflutter pub get","调用实例-4#调用实例":"import 'package:serverchan_sdk/serverchan_sdk.dart';\nvoid main() async {\n  const sendkey = 'your-sendkey';\n  const title = '测试标题';\n  const desp = '这是消息的详细内容';\n  try {\n    ScSendResponse response = await scSend(sendkey, title, desp: desp);\n    print('Response Code: ${response.code}');\n    print('Response Message: ${response.message}');\n  } catch (e) {\n    print('Error: $e');\n  }\n}","没有覆盖的语言#没有覆盖的语言":"如果您使用的语言没有SDK，您可以把以下提示词粘贴到 ChatGPT/Claude/DeepSeek/Kimi，让AI立马帮你写一个。\n请参考以下TypeScript代码，编写<xxx语言>对应的实现：\n```typescript\nimport fetch from 'cross-fetch';\n// ScSendOptions 定义了推送函数的可选参数\nexport interface ScSendOptions {\n    /** sctp 专用：标签列表，多个标签使用竖线分隔 */\n    tags?: string;\n    /** sctp 和非 sctp：消息卡片的简短描述 */\n    short?: string;\n    /** 非 sctp：是否隐藏调用IP，1为隐藏 */\n    noip?: 1;\n    /** 非 sctp：推送使用的消息通道，多个通道值用竖线隔开 */\n    channel?: string;\n    /** 非 sctp：消息抄送的 openid，多个 openid 用逗号或竖线分隔 */\n    openid?: string;\n}\n// ScSendResponse 定义了推送函数返回的响应结果\nexport interface ScSendResponse {\n    /** 返回的状态码 */\n    code: number;\n    /** 返回的消息 */\n    message: string;\n    /** 可选的返回数据 */\n    data?: any;\n}\n// 调用 Server 酱的推送函数\nexport async function scSend(\n    sendkey: string,\n    title: string,\n    desp: string = '',\n    options: ScSendOptions = {}\n): Promise<ScSendResponse> {\n    \n    const url = sendkey.startsWith('sctp') \n        ? `https://${sendkey}.push.ft07.com/send`\n        : `https://sctapi.ftqq.com/${sendkey}.send`;\n    \n    const params = {\n        title,\n        desp,\n        ...options,\n    };\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify(params),\n    });\n    const result = await response.json() as ScSendResponse;\n    return result;\n}\n```\n代码仓库：GitHub · 国内网络镜像：Gitee"}},"/serverchan3/usecase/webmonitor":{"title":"网页监测","data":{"check酱#Check酱":"","应用介绍#应用介绍":"Check酱是一个通用网页内容监控工具，可以监测网页内容变化，并通过Server酱推送通知。","兼容情况#兼容情况":"0.9.23开始兼容Server酱³","如何设置#如何设置":"创建任务页面，直接填入SendKey即可。"}}}